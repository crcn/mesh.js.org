var _remoteModuleCache, addLocalDeps, addRemoteFiles, async, cdn, comerr, compileScript, crypto, detective, getFilesHash, paperclip, parse, parser, path, scanRemoteDeps, superagent, transformContent;

path = require("path");

superagent = require("superagent");

async = require("async");

detective = require("detective");


module.exports = function(files, useCompiler, complete) {
  if (typeof useCompiler === "function") {
    complete = useCompiler;
    useCompiler = true;
  }
  addLocalDeps(files);
  return addRemoteFiles(files, function(err) {
    var e, fn, script;
    if (err) {
      return complete(err);
    }
    try {
      script = parse(files);
      if (useCompiler) {
        fn = compileScript(script);
      }
      return complete(null, fn, script);
    } catch (_error) {
      e = _error;
      return complete(e);
    }
  });
};


addLocalDeps = function(files) {
  return files.forEach(function(file) {
    return file.deps = detective(file.content);
  });
};

scanRemoteDeps = function(files) {
  var remoteDeps;
  return remoteDeps = [];
};

// cdn = "http://browserify-cdn.herokuapp.com";
cdn = "https://wzrd.in";

_remoteModuleCache = {};

addRemoteFiles = function(files, complete) {
  var dep, depParts, file, i, j, len, len1, moduleName, name, pkg, ref, remoteDeps, version;
  remoteDeps = {};
  for (i = 0, len = files.length; i < len; i++) {
    file = files[i];
    ref = file.deps;
    for (j = 0, len1 = ref.length; j < len1; j++) {
      dep = ref[j];
      if (!~dep.indexOf("/")) {
        depParts = dep.split("@");
        name = depParts.shift();
        version = depParts.shift() || "latest";
        moduleName = name + (version === "latest" ? "" : "@" + version);
        if (_remoteModuleCache[moduleName]) {
          files.push(_remoteModuleCache[moduleName]);
          continue;
        }
        remoteDeps[name] = version;
      }
    }
  }
  pkg = {
    "options": {
      "debug": true
    },
    "dependencies": remoteDeps
  };
  if (!Object.keys(remoteDeps).length) {
    return complete();
  }
  superagent.post(cdn + "/multi").send(pkg).end(function(err, response) {
    var modulePath, remoteModule;
    if (err) {
      return complete(err);
    }
    if (!response.body) {
      return complete(new Error(response.text));
    }
    for (moduleName in response.body) {
      files.push(remoteModule = {
        path: modulePath = remoteDeps[moduleName] === "latest" ? moduleName : moduleName + "@" + remoteDeps[moduleName],
        content: "module.exports = " + response.body[moduleName].bundle + "('" + moduleName + "')"
      });
      if (process.browser) {
        _remoteModuleCache[modulePath] = remoteModule;
      }
    }
    return complete();
  });
  return async.each(remoteDeps);
};

exports.script = compileScript = function(source) {
  return new Function("return " + source)();
};

parse = function(files) {
  var buffer, file, i, len;
  buffer = "(function () {\n var defined = {}, modules     = {}; var _console = window.console, console  = {}; ['log', 'error', 'warn', 'notice'].forEach(function (level) { console[level] = function () { window.console[level].apply(window.console, arguments); }; }); function define (path, createModule) { defined[path] = createModule; } function resolve (path) { if (defined[path]) return path; if (defined[path + '/index.js']) return path + '/index.js'; if (defined[path + '.js']) return path + '.js'; } function require (path) { var resolvedPath = resolve(path); if (!resolvedPath) { throw new Error('unable to resolve ' + path); } return modules[resolvedPath] || (modules[resolvedPath] = createModule(resolvedPath)) } function createModule (path) { var module = { exports: {} }; var pathParts = path.split('/'), dirname       = pathParts.slice(0, pathParts.length - 1).join('/'); defined[path](module, module.exports, function (relpath) { return require(relpath.replace(/^\\./, dirname)); }); return module.exports; }";
  for (i = 0, len = files.length; i < len; i++) {
    file = files[i];
    buffer += "\ndefine('" + file.path + "', function (module, exports, require) {";
    buffer += "\n" + transformContent(file) + "\n";
    buffer += "});";
  }
  buffer += "return require('/index.js');";
  buffer += "\n})();";
  return buffer;
};

transformContent = function(file) {
  var ext = file.path.split(".").pop();

  if (file.path === "/index.js") {
    file.content = "exports.initialize = function (preview) {" + "preview.captureLogs(console);" + file.content + "};";
  }
  if (true || ext === "js" || !~file.path.indexOf(".") || ~file.path.indexOf("@")) {
    return file.content;
  } else {
    return "module.exports = decodeURIComponent('" + encodeURIComponent(file.content) + "');";
  }
};

// ---
// generated by coffee-script 1.9.2
